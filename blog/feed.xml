<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog</title>
    <description>digital marketing, seo, sem, social, development.
</description>
    <link>https://anthonydeguzman.com/blog/</link>
    <atom:link href="https://anthonydeguzman.com/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Nov 2016 16:13:44 -0500</pubDate>
    <lastBuildDate>Thu, 10 Nov 2016 16:13:44 -0500</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>AdWords Scripts Tutorial: Basic Fundamentals</title>
        <description>&lt;p&gt;If you’ve stumbled across my blog looking for SEO articles, this Google AdWords Scripts Tutorial series may come as a surprise for you.&lt;/p&gt;

&lt;p&gt;In any case, I’ll be going over the fundamentals of AdWords Scripts – and explaining them in layman’s terms so PPC specialists of all levels can take advantage of them. Despite that, it’d be best if you have, at least a very basic understanding of JavaScript before continuing…&lt;/p&gt;

&lt;p&gt;But without further ado, let’s get right into it!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;You can follow this tutorial using either an MCC AdWords account or a regular, single account one. Access to the online scripting interface can be found under &lt;em&gt;Bulk Operations &amp;gt; Scripts.&lt;/em&gt;&lt;/p&gt;

&lt;amp-img width=&quot;660&quot; height=&quot;330&quot; alt=&quot;adwords scripts tutorials&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/06/adwords-scripts-tutorials.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;There are &lt;strong&gt;2&lt;/strong&gt;&lt;strong&gt; key AdWords Scripting concepts&lt;/strong&gt; all PPC specialists need to understand before beginning: &lt;em&gt;selectors&lt;/em&gt; and &lt;em&gt;iterators&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;adwords-selectors&quot;&gt;AdWords Selectors&lt;/h2&gt;

&lt;p&gt;Almost every AdWords Script is going to begin with a selector. An AdWords selector determines which data you want to pull and a set of conditions such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;date range&lt;/li&gt;
  &lt;li&gt;limits (e.g. pull in only 100 conversions)&lt;/li&gt;
  &lt;li&gt;order (e.g. order by clicks descending)&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, let’s say you want to pull the &lt;strong&gt;top 20 converting keywords,&lt;/strong&gt; in the &lt;strong&gt;order of descending conversions&lt;/strong&gt; from the &lt;strong&gt;last 7 days.&lt;/strong&gt; We would need the following selector:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var keywordSelector = AdWordsApp.keywords()
.withLimit(20)
.forDateRange('LAST_7_DAYS')
.orderBy('Conversions DESC')
.get();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Click &lt;a href=&quot;https://developers.google.com/adwords/scripts/docs/reference/adwordsapp/adwordsapp_keywordselector&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; for some more &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; methods to try.&lt;/p&gt;

&lt;h3 id=&quot;common-mistakes&quot;&gt;Common Mistakes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The objects and methods provided by Google AdWords are &lt;em&gt;case-sensitive&lt;/em&gt;. In other words, if you write &lt;code class=&quot;highlighter-rouge&quot;&gt;var keywordSelector = Ad&amp;lt;strong&amp;gt;w&amp;lt;/strong&amp;gt;ordsApp.keywords()&lt;/code&gt; – with a lower case “w”, your code will NOT work.&lt;/li&gt;
  &lt;li&gt;Filters applied to the selector have to be done within quotes: i.e. (‘Conversions DESC’) with the exception of numbers i.e. (10)&lt;/li&gt;
  &lt;li&gt;Don’t forget to add the .get() method with semi-colon at the end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that this piece of code _only _pulls in data we selected on the &lt;strong&gt;back-end. &lt;/strong&gt;So nothing will show up, nor will the script do anything with the selected keywords.&lt;/p&gt;

&lt;p&gt;In order to manipulate the data we pulled, we need to &lt;strong&gt;iterate &lt;/strong&gt;– or go through our set of &lt;strong&gt;selected &lt;/strong&gt;keywords one by one, and write a piece of code to execute a particular action. For that, we will need an &lt;strong&gt;iterator.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;adwords-iterator&quot;&gt;AdWords Iterator&lt;/h2&gt;

&lt;p&gt;As stated before, the AdWords selector pulls in a list of entities under a set of conditions. We need to use an AdWords iterator to go through each keyword and do what we need it to do.&lt;/p&gt;

&lt;p&gt;We’re going to use something called a &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;With regards to AdWords, our &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop will &lt;strong&gt;iterate&lt;/strong&gt; through our list of AdWords entities we &lt;strong&gt;selected&lt;/strong&gt; only &lt;em&gt;while&lt;/em&gt; a certain condition is &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; – and until that very same condition becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (keywordSelector.hasNext()) {
        var keyword = keywordSelector.next();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Taking a closer look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;keywordSelector&lt;/code&gt; variable – we now have:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keywordSelector.hasNext()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which is the loop’s condition to check if there is a keyword “next” on our list. If there isn’t one, that means the iterator has reached the end of our list of keywords, and the code has stopped.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var keyword = keywordSelector.next()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above is the individual &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; object. This &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; variable will be used to pull the information we want.&lt;/p&gt;

&lt;p&gt;Let’s put everything together and see what we have so far:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var keywordSelector = AdWordsApp.keywords()
.withLimit(20)
.forDateRange('LAST_7_DAYS')
.orderBy('Conversions DESC')
.get();

while (keywordSelector.hasNext()) { 
        var keyword = keywordSelector.next();
 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now it’s time for the fun part! All the individual keyword specific data lies within the the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; object, such as the keyword text itself, quality scores, etc.&lt;/p&gt;

&lt;p&gt;Within our &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop, we’re going to define our keyword text and &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt; them out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var keywordText = keyword.getText();
Logger.log(keywordText);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.getText()&lt;/code&gt; is one of many methods of the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyword&lt;/code&gt; object which pulls the keyword text. &lt;code class=&quot;highlighter-rouge&quot;&gt;Logger.log()&lt;/code&gt; is AdWords’ version of &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log()&lt;/code&gt; – which is used to &lt;code class=&quot;highlighter-rouge&quot;&gt;log&lt;/code&gt; out or display what you’re pulling.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href=&quot;https://developers.google.com/adwords/scripts/docs/reference/adwordsapp/adwordsapp_keyword&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;link&lt;/a&gt; to view more keyword methods.&lt;/p&gt;

&lt;p&gt;Finally, let’s add everything together to see the top 20 keywords with the highest number of conversions – from the last 7 days.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function main() {
        var keywordSelector = AdWordsApp.keywords()
        .withLimit(20)
        .forDateRange('LAST_7_DAYS')
        .orderBy('Conversions DESC')
        .get();

        while (keywordSelector.hasNext()) { 
                var keyword = keywordSelector.next();
                var keywordText = keyword.getText();
                Logger.log(keywordText);
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may have noticed that I’ve wrapped the code with a &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;. That’s because it’s needed for AdWords to save and run the code.&lt;/p&gt;

&lt;p&gt;And there you have it. Easy, right? The cool part about these concepts is that you can apply it similarly to other AdWords data you want to pull:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function main() {
        var campaignSelector = AdWordsApp.campaigns()
        .withLimit(10)
        .withCondition('Status = ENABLED')
        .forDateRange('LAST_7_DAYS')
        .orderBy('Conversions DESC')
        .get();

        while (campaignSelector.hasNext()) { 
                var campaign = campaignSelector.next();
                var campaignName = campaign.getName();
                Logger.log(campaignName);
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully this tutorial has made learning AdWords Scripts less daunting. I would suggest checking out some more &lt;a href=&quot;https://developers.google.com/adwords/scripts/docs/examples/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;examples&lt;/a&gt; on the Developer site — as well as Russell Savage’s &lt;a href=&quot;http://www.freeadwordsscripts.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;blog&lt;/a&gt; for cool API scripts.&lt;/p&gt;

&lt;p&gt;Leave a comment below if this has proved useful or helpful — and I’ll keep the tutorials going.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 09:00:12 -0400</pubDate>
        <link>https://anthonydeguzman.com/blog/adwords-scripts-basics/</link>
        <guid isPermaLink="true">https://anthonydeguzman.com/blog/adwords-scripts-basics/</guid>
        
        
        <category>AdWords Scripts</category>
        
      </item>
    
      <item>
        <title>How to Add Schema for WordPress Twenty Fifteen</title>
        <description>&lt;p&gt;Since the Google Hummingbird update in 2013, Google has changed their ranking algorithms from simple/phrase-type keywords – to entity and query-like ones.&lt;/p&gt;

&lt;p&gt;In the words of &lt;a href=&quot;http://themoralconcept.net&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Josh Bachynski&lt;/a&gt;, SEO is all about ranking &lt;em&gt;things, not strings. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As a result, Schema markup has never been more important for on-page optimization. However, despite being simple to understand, and easy to implement on a simple, static HTML website —  applying Schema markup to a common CMS, such as WordPress, can be a bit of a nightmare.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-are-the-benefits-of-schema&quot;&gt;What are the benefits of Schema?&lt;/h2&gt;

&lt;p&gt;As all &lt;em&gt;real SEOs&lt;/em&gt; know, trying to determine which quality factors &lt;em&gt;actually&lt;/em&gt; influence the search engine rankings is almost impossible with absolute certainty. What we can conclude is that Google wants &lt;em&gt;relevant&lt;/em&gt;, and _high quality content. _So what the heck does that mean?&lt;/p&gt;

&lt;p&gt;While &lt;span style=&quot;text-decoration: underline;&quot;&gt;quality content&lt;/span&gt; is one thing, we can use Schema to show Google how &lt;span style=&quot;text-decoration: underline;&quot;&gt;relevant&lt;/span&gt; a page is for a particular query — if done correctly.&lt;/p&gt;

&lt;h2 id=&quot;an-example-detour&quot;&gt;An Example (detour)&lt;/h2&gt;

&lt;p&gt;It’s not much of a &lt;em&gt;before and after&lt;/em&gt;, so you’ll have to take this example with a grain of salt:&lt;/p&gt;

&lt;p&gt;I recently published an article (my first one, in fact) targeting the keyword &lt;em&gt;indeed resume search&lt;/em&gt;, but submitted it fully packed with Schema markup before-hand. The post has little to no backlinks, and has maybe 4-5 social shares.&lt;/p&gt;

&lt;p&gt;It’s not a first-place ranking, but it’s definitely on the first page. It’s good to note that the competition isn’t so bad, since I’m targeting Google Canada —  although it doesn’t help that I’m still competing with Indeed’s own domain, as well as about.com.&amp;lt;figure id=”attachment_179” style=”width: 660px” class=”wp-caption alignnone”&lt;/p&gt;

&lt;amp-img width=&quot;660&quot; height=&quot;370&quot; alt=&quot;how to add schema&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/03/schema-seo-wordpress.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;If you can’t see it, the page currently ranks for the 8th position&lt;/p&gt;

&lt;h2 id=&quot;adding-schema-to-wordpress&quot;&gt;Adding Schema to WordPress&lt;/h2&gt;

&lt;p&gt;The trick to getting schema to work effectively is to apply markup that most accurately describes your website. Adding properties like &lt;code class=&quot;highlighter-rouge&quot;&gt;WPHeader&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;WPFooter&lt;/code&gt; isn’t going to make a whole lot of a difference — not to bash many of the tutorials and “schema implemented” themes out there.&lt;/p&gt;

&lt;p&gt;The key is to add the markup in a &lt;strong&gt;hierarchal&lt;/strong&gt; manner, having the nested &lt;code class=&quot;highlighter-rouge&quot;&gt;itemprops&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;itemtypes&lt;/code&gt; relevant to the parent.&lt;/p&gt;

&lt;p&gt;For this particular example, I’m going to explain how I added schema to WordPress’ Twenty Fifteen theme in the following format:&lt;/p&gt;

&lt;pre style=&quot;text-align: center;&quot;&gt;Website &amp;gt; Blog &amp;gt; Blogposting&lt;/pre&gt;

&lt;p&gt;First off, we’re going to set up a child theme. A child theme is a subsidiary theme which you can add changes to, without losing it after an update. You can check out how to set it up in the &lt;a href=&quot;http://codex.wordpress.org/Child_Themes&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;WordPress codex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After that’s set up, you can add these files to your child theme folder:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;header.php&lt;/li&gt;
  &lt;li&gt;functions.php&lt;/li&gt;
  &lt;li&gt;content.php&lt;/li&gt;
  &lt;li&gt;template-tags.php (more on this later)&lt;/li&gt;
  &lt;li&gt;style.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we’re using the Twenty Fifteen theme, we don’t have to worry about adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;Website&lt;/code&gt; markup; it’s added by default. Step one, check.&lt;/p&gt;

&lt;h3 id=&quot;schemablog-markup&quot;&gt;Schema: Blog Markup&lt;/h3&gt;

&lt;p&gt;First off, we’re going to find the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; tag, and replace it with the following:&lt;/p&gt;

&lt;pre&gt;&amp;lt;body itemscope itemtype=&quot;http://schema.org/Blog&quot; &amp;lt;?php body_class(); ?&amp;gt;&amp;gt;
&lt;/pre&gt;

&lt;h3 id=&quot;schema-blogposting-markup&quot;&gt;Schema: blogPosting Markup&lt;/h3&gt;

&lt;p&gt;Now, we’re going to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;BlogPosting&lt;/code&gt; and all its properties to the &lt;strong&gt;content.php&lt;/strong&gt; (for other themes, you may find it in &lt;strong&gt;single.php&lt;/strong&gt;).&lt;strong&gt; &lt;/strong&gt;We need to find the opening &lt;code class=&quot;highlighter-rouge&quot;&gt;article&lt;/code&gt; tag, and add the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;article itemprop=&quot;blogPost&quot; itemscope itemtype=&quot;http://schema.org/BlogPosting&quot; id=&quot;post-&amp;lt;?php the_ID(); ?&amp;gt;&quot; &amp;lt;?php post_class(); ?&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;itemprop=&quot;blogPost&quot;&lt;/code&gt; is an item of the previous &lt;code class=&quot;highlighter-rouge&quot;&gt;Blog&lt;/code&gt; itemtype — and the &lt;code class=&quot;highlighter-rouge&quot;&gt;itemtype=&quot;http://schema.org/BlogPosting&quot;&lt;/code&gt; begins a new type of schema markup, to further describe said &lt;code class=&quot;highlighter-rouge&quot;&gt;blogPost&lt;/code&gt;. You might have to read that twice, but let’s continue.&lt;/p&gt;

&lt;p&gt;For every blog post, there is a title — or a &lt;code class=&quot;highlighter-rouge&quot;&gt;headline:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;header class=&quot;entry-header&quot; itemprop=&quot;headline&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What comes after? The &lt;code class=&quot;highlighter-rouge&quot;&gt;articleBody&lt;/code&gt;, of course:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;entry-content&quot; itemprop=&quot;articleBody&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we need to add all the meta data to our &lt;code class=&quot;highlighter-rouge&quot;&gt;blogPosting&lt;/code&gt;. This is where things get a bit tricky.&lt;/p&gt;

&lt;p&gt;The file we need to edit is &lt;strong&gt;template-tags.php&lt;/strong&gt;, but unfortunately, the theme is designed in a way where it’s called by the &lt;strong&gt;functions.php&lt;/strong&gt;, and the function being called can’t be overwritten.&lt;/p&gt;

&lt;p&gt;A workaround is to replace the &lt;strong&gt;template-tags.php &lt;/strong&gt;file in the &lt;span style=&quot;text-decoration: underline;&quot;&gt;parent theme&lt;/span&gt; each time you update (defeats the purpose of a child theme, I know) — or you can choose not to update the theme entirely.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( get_the_time( 'U' ) !== get_the_modified_time( 'U' ) ) {
 $time_string = '&amp;lt;time class=&quot;entry-date published&quot; datetime=&quot;%1$s&quot;&amp;gt;&amp;lt;span itemprop=&quot;dateCreated datePublished&quot;&amp;gt;%2$s&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;&amp;lt;time class=&quot;updated&quot; datetime=&quot;%3$s&quot;&amp;gt;&amp;lt;span itemprop=&quot;dateModified&quot;&amp;gt;%4$s&amp;lt;/span&amp;gt;&amp;lt;/time&amp;gt;';
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ctrl+F and find the above code. You’ll want to create a span around &lt;code class=&quot;highlighter-rouge&quot;&gt;%2$&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;%4$s&lt;/code&gt;, adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;dateCreated datePublished&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;dateModified&lt;/code&gt; respectively.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span itemprop=&quot;dateCreated datePublished&quot;&amp;gt;%2$s&amp;lt;/span&amp;gt;

&amp;lt;span itemprop=&quot;dateModified&quot;&amp;gt;%4$s&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Last but not least, let’s add the author markup&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( 'post' == get_post_type() ) {
 if ( is_singular() || is_multi_author() ) {
 printf( '&amp;lt;span class=&quot;byline&quot;&amp;gt;&amp;lt;span class=&quot;author vcard&quot;&amp;gt;&amp;lt;span class=&quot;screen-reader-text&quot;&amp;gt;%1$s &amp;lt;/span&amp;gt;&amp;lt;a class=&quot;url fn n&quot; href=&quot;%2$s&quot;&amp;gt;&amp;lt;span itemprop=&quot;author&quot;&amp;gt;%3$s&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;',
 _x( 'Author', 'Used before post author name.', 'twentyfifteen' ),
 esc_url( get_author_posts_url( get_the_author_meta( 'ID' ) ) ),
 get_the_author()
 );
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Within this piece of code, you’ll need to find &lt;code class=&quot;highlighter-rouge&quot;&gt;%3$s&lt;/code&gt; and wrap it with &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;itemprop&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;span itemprop=&quot;author&quot;&amp;gt;%3$s&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can store a copy of the &lt;strong&gt;template-tags.php &lt;/strong&gt;in your child theme, and copy it over whenever the parent theme updates.&lt;/p&gt;

&lt;h3 id=&quot;schema-thing-markup&quot;&gt;Schema: Thing Markup&lt;/h3&gt;

&lt;p&gt;The great thing about the &lt;code class=&quot;highlighter-rouge&quot;&gt;Thing&lt;/code&gt; markup (see what I did there?) is that it can be applied to any other markup to further describe your content. For all you developers out there, you can think of it as a prototype.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;functions.php&lt;/strong&gt; file of your child theme, add the below code to add &lt;code class=&quot;highlighter-rouge&quot;&gt;itemprop=&quot;image&quot;&lt;/code&gt; to all of your featured images.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;add_filter('wp_get_attachment_image_attributes', 'ipwp_img_attr', 10, 2);
function ipwp_img_attr($attr) {
 $attr['itemprop'] = 'image';
 return $attr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-result-8211-and-a-final-note&quot;&gt;The Result – And a Final Note&lt;/h2&gt;

&lt;p&gt;If everything is done correctly, you should see a nice green checkmark next to your schema markup in Google’s Structured Data Testing Tool.&lt;/p&gt;

&lt;amp-img width=&quot;660&quot; height=&quot;321&quot; alt=&quot;schema for wordpress&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/03/schema-for-wordpress.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;Adding the markup manually to your WordPress theme is a bit of a pain, but beneficial in the long run — it forces you to develop a deeper understanding of how the theme is constructed. You also get the flexibility of adding whatever markup you want, as well as not having to rely on a plugin.&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to comment below. Don’t forget to share it with anyone who’s looking to get a deeper, and more technical understanding of Schema!&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Mar 2015 21:22:53 -0500</pubDate>
        <link>https://anthonydeguzman.com/blog/schema-wordpress/</link>
        <guid isPermaLink="true">https://anthonydeguzman.com/blog/schema-wordpress/</guid>
        
        
        <category>On-page SEO</category>
        
      </item>
    
      <item>
        <title>How to Get a Job on Indeed Resume Search</title>
        <description>&lt;p&gt;Ever been unemployed? Chances are you’ve come across Indeed a few times in your job search.&lt;/p&gt;

&lt;p&gt;But for those of you who live under a rock, &lt;a itemprop=&quot;url&quot; href=&quot;http://www.indeed.com&quot; target=&quot;_blank&quot;&gt;Indeed&lt;/a&gt; is a job search engine for new career opportunities and recruitment. Think LinkedIn, without the extra fluff of making your profile look pretty.&lt;/p&gt;

&lt;p&gt;What most people forget about Indeed is that it’s also a great place for recruiting – especially their resume search engine. And like most of you who type in different keywords to find potential job postings, recruiters use a similar approach to find qualified applicants. If a recruiter is looking for a candidate to fill a marketing analyst position, they would hopefully search for the term, “marketing analyst,” and find those with relevant experience.&lt;/p&gt;

&lt;p&gt;So how does this work to your advantage? You can SEO your way in getting the top position of Indeed’s Resume Search results for a particular keyword in your job field. Let’s say your name comes up first when a recruiter searches for a certain keyword, he/she will likely check your resume, and maybe contact you for an interview.&lt;/p&gt;

&lt;p&gt;Let’s start!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;indeed-optimization&quot;&gt;Indeed Optimization&lt;/h2&gt;

&lt;p&gt;Let’s say we want your resume to appear when a recruiter searches for SEO, or SEO specialist. There are several ranking factors to consider when it comes to improving your resume’s search visibility.&lt;/p&gt;

&lt;h3 id=&quot;name&quot;&gt;1. Name&lt;/h3&gt;

&lt;p&gt;This first one might not mean much to you at the moment, but hear me out. If your first or last name is Marketing, you’ll likely be ranked first without further changes. Now try searching for SEO, and you’ll see that some people actually have it as their real last name.&lt;/p&gt;

&lt;amp-img width=&quot;605&quot; height=&quot;243&quot; alt=&quot;indeed job search&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/02/indeed-searching.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;Keep in mind I’m not advising you to change your name to get a job. What you can do, instead, is add a relevant title after your last name, making it look more professional, and hopefully non-spammy.&lt;/p&gt;

&lt;amp-img width=&quot;463&quot; height=&quot;117&quot; alt=&quot;indeed resumes&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/02/indeed-jobs.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;It also looks nice when you view your resume.&lt;/p&gt;

&lt;amp-img width=&quot;550&quot; height=&quot;178&quot; alt=&quot;indeed job posting&quot; layout=&quot;responsive&quot; src=&quot;/blog/assets/wp-content/uploads/2015/02/indeed-resume.jpg&quot;&gt;&lt;/amp-img&gt;

&lt;p&gt;Simply go to Resume &amp;gt; Edit Resume, and click edit on the top-right. In terms of format, you want to add it to the field with your last name, separated with a pipe — but a hyphen works too.&lt;/p&gt;

&lt;h3 id=&quot;headline&quot;&gt;2. Headline&lt;/h3&gt;

&lt;p&gt;Indeed makes your most recent job position your headline when you import your resume. If it’s not what you’re targeting, then I suggest you change it.&lt;/p&gt;

&lt;p&gt;Generally, you’ll want to include a few keywords in addition to your target term — but don’t go too crazy. I went a bit over the top for my headline, so don’t take it as the ideal example!&lt;/p&gt;

&lt;p&gt;Try to keep each keyword as closely related as possible, so you don’t lose credibility. For example, adding SEO and SEM are fine because they belong in search. However, I would avoid placing keywords like SEO and graphic design together on the same headline; it’s a bit of a stretch.&lt;/p&gt;

&lt;p&gt;Of course, if you really do know graphic design, then you’re definitely free to put it on your resume — in the skills section. It’s all about the appropriate placement.&lt;/p&gt;

&lt;h3 id=&quot;jobtitle&quot;&gt;3. Job Title&lt;/h3&gt;

&lt;p&gt;There’s not much you can do if your current job title doesn’t match the keyword you want. You can try the previous pipe method and place it in addition to your title. It all depends on how strict your job title is, and how your current or previous employer would feel if you &lt;em&gt;tweaked&lt;/em&gt; your position a bit.&lt;/p&gt;

&lt;p&gt;If you’re in a start-up, or a relatively small company, then your job title isn’t as important because you’re likely doing different types of tasks anyway, so go ahead and change away.&lt;/p&gt;

&lt;h3 id=&quot;job-description--skills&quot;&gt;4. Job Description &amp;amp; Skills&lt;/h3&gt;

&lt;p&gt;Finally we have the job description and skills. Of course, you should write your description according to the results of your efforts and past experience, but it doesn’t hurt to throw in a keyword or two.&lt;/p&gt;

&lt;p&gt;Under skills, you can pretty much go all-out with the keyword stuffing (don’t quote me). If you have intermediate knowledge on a subject, or are skilled in a specific tool, then list them all here. Add different abbreviations and synonyms to make sure you cover all the bases.&lt;/p&gt;

&lt;h3 id=&quot;update-frequently&quot;&gt;5. Update Frequently&lt;/h3&gt;

&lt;p&gt;Using the above methods will definitely get you ranking, but over time, you might notice your position decreasing if you don’t regularly update your resume.&lt;/p&gt;

&lt;p&gt;To counter this, I simply add/remove a keyword in the skills section, and re-save. As long as you see the date or time change under your name, you should be fine.&lt;/p&gt;

&lt;h3 id=&quot;final-note&quot;&gt;Final Note&lt;/h3&gt;

&lt;p&gt;Optimizing your resume for Indeed is basic, rudimentary SEO. It’s so basic that it almost encourages keyword-stuffing — which is definitely frowned upon in the Google world.&lt;/p&gt;

&lt;p&gt;You’re tailoring your resume for a target keyword, and job position — similar to writing a blog post based on your keyword research, and topic.&lt;/p&gt;

&lt;p&gt;Now, once you start ranking for your desired job title, all the recruiters will start flocking to your email. Whatever happens after is up to you.&lt;/p&gt;

&lt;p&gt;If you liked this article share it with your friends and family to give them an edge on their job search!&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Feb 2015 03:30:49 -0500</pubDate>
        <link>https://anthonydeguzman.com/blog/indeed-search/</link>
        <guid isPermaLink="true">https://anthonydeguzman.com/blog/indeed-search/</guid>
        
        
        <category>Practical SEO</category>
        
      </item>
    
  </channel>
</rss>
